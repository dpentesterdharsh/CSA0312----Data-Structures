#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node *left, *right;
};
struct Node* createNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->left = node->right = NULL;
    return node;
}
struct Node* rightRotate(struct Node* root) {
    struct Node* newRoot = root->left;
    if (!newRoot) return root; 
    root->left = newRoot->right;
    newRoot->right = root;
    return newRoot;
}
struct Node* leftRotate(struct Node* root) {
    struct Node* newRoot = root->right;
    if (!newRoot) return root; 
    root->right = newRoot->left;
    newRoot->left = root;
    return newRoot;
}
struct Node* splay(struct Node* root, int key) {
    if (root == NULL || root->data == key) return root;
    if (key < root->data) {
        if (root->left == NULL) return root;
        if (key < root->left->data) {
            root = rightRotate(root);
            if (root == NULL) return root;  
            root = rightRotate(root);
        }
        else if (key > root->left->data) {
            root->left = leftRotate(root->left);
            if (root->left == NULL) return root;  
            root = rightRotate(root);
        }
    }
    else {
        if (root->right == NULL) return root;
        if (key > root->right->data) {
            root = leftRotate(root);
            if (root == NULL) return root; 
            root = leftRotate(root);
        }
        else if (key < root->right->data) {
            root->right = rightRotate(root->right);
            if (root->right == NULL) return root; 
            root = leftRotate(root);
        }
    }
    return root;
}
struct Node* insert(struct Node* root, int key) {
    // Perform the normal BST insert
    if (root == NULL) return createNode(key);
    root = splay(root, key);
    if (root->data == key) return root;
    struct Node* newNode = createNode(key);
    if (root->data < key) {
        newNode->left = root;
        newNode->right = root->right;
        root->right = NULL;
    }
    else {
        newNode->right = root;
        newNode->left = root->left;
        root->left = NULL;
    }
    return newNode; 
}
struct Node* search(struct Node* root, int key) {
    return splay(root, key);
}
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}
int main() {
    struct Node* root = NULL;
    root = insert(root, 20);
    root = insert(root, 15);
    root = insert(root, 30);
    root = insert(root, 10);
    root = insert(root, 5);
    root = insert(root, 1);
    printf("In-order traversal of the Splay Tree:\n");
    inorder(root);
    printf("\n");
    printf("Searching for 15 in the tree:\n");
    root = search(root, 15);
    inorder(root);
    printf("\n");
    printf("Searching for 100 in the tree:\n");
    root = search(root, 100);
    inorder(root);
    printf("\n");
    return 0;
}

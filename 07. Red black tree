#include <stdio.h>
#include <stdlib.h>
#define RED   0
#define BLACK 1
struct Node {
    int data;
    int color;  // RED or BLACK
    struct Node *left, *right, *parent;
};
struct Node* createNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->color = RED; 
    node->left = node->right = node->parent = NULL;
    return node;
}
void leftRotate(struct Node** root, struct Node* x) {
    struct Node* y = x->right;
    x->right = y->left;
    if (y->left != NULL) {
        y->left->parent = x;
    }
    y->parent = x->parent;
    if (x->parent == NULL) {
        *root = y;  // y is now the root
    } else if (x == x->parent->left) {
        x->parent->left = y;
    } else {
        x->parent->right = y;
    }
    y->left = x;
    x->parent = y;
}
void rightRotate(struct Node** root, struct Node* y) {
    struct Node* x = y->left;
    y->left = x->right;
    if (x->right != NULL) {
        x->right->parent = y;
    }
    x->parent = y->parent;
    if (y->parent == NULL) {
        *root = x;  // x is now the root
    } else if (y == y->parent->left) {
        y->parent->left = x;
    } else {
        y->parent->right = x;
    }
    x->right = y;
    y->parent = x;
}
void fixViolation(struct Node** root, struct Node* newNode) {
    while (newNode != *root && newNode->parent->color == RED) {
        struct Node* parent = newNode->parent;
        struct Node* grandparent = parent->parent;
        if (parent == grandparent->left) {
            struct Node* uncle = grandparent->right;
            if (uncle != NULL && uncle->color == RED) {
                grandparent->color = RED;
                parent->color = BLACK;
                uncle->color = BLACK;
                newNode = grandparent;  // Move up the tree
            } else {
                if (newNode == parent->right) {
                    leftRotate(root, parent);
                    newNode = parent;
                    parent = newNode->parent;
                }
                rightRotate(root, grandparent);
                parent->color = BLACK;
                grandparent->color = RED;
                newNode = parent;
            }
        }
        else {
            struct Node* uncle = grandparent->left;
            if (uncle != NULL && uncle->color == RED) {
                grandparent->color = RED;
                parent->color = BLACK;
                uncle->color = BLACK;
                newNode = grandparent;  
            } else {
                if (newNode == parent->left) {
                    rightRotate(root, parent);
                    newNode = parent;
                    parent = newNode->parent;
                }
                leftRotate(root, grandparent);
                parent->color = BLACK;
                grandparent->color = RED;
                newNode = parent;
            }
        }
    }

    (*root)->color = BLACK; 
}
void insert(struct Node** root, int data) {
    struct Node* newNode = createNode(data);  
    struct Node* y = NULL;
    struct Node* x = *root;
    while (x != NULL) {
        y = x;
        if (newNode->data < x->data) {
            x = x->left;
        } else {
            x = x->right;
        }
    }
    newNode->parent = y;
    if (y == NULL) {
        *root = newNode;  // The tree was empty
    } else if (newNode->data < y->data) {
        y->left = newNode;
    } else {
        y->right = newNode;
    }
    fixViolation(root, newNode);
}
void inorder(struct Node* root) {
    if (root == NULL) {
        return;
    }
    inorder(root->left);
    printf("%d (%s) ", root->data, (root->color == RED) ? "RED" : "BLACK");
    inorder(root->right);
}
int main() {
    struct Node* root = NULL;
    insert(&root, 20);
    insert(&root, 15);
    insert(&root, 25);
    insert(&root, 10);
    insert(&root, 5);
    insert(&root, 1);
    printf("In-order traversal of the Red-Black Tree:\n");
    inorder(root);
    return 0;
}

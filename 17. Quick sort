#include <stdio.h>
#include <stdlib.h>

// Function to swap two elements in an array
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Partition function to place the pivot at the correct position
int partition(int array[], int low, int high) {
    int pivot = array[high];  // Choosing the last element as pivot
    int i = low - 1;  // Index of smaller element

    for (int j = low; j <= high - 1; j++) {
        // If the current element is smaller than or equal to the pivot
        if (array[j] <= pivot) {
            i++;  // Increment the index of smaller element
            swap(&array[i], &array[j]);  // Swap the elements
        }
    }
    swap(&array[i + 1], &array[high]);  // Swap the pivot element to its correct position
    return (i + 1);  // Return the index of the pivot
}

// Quick Sort function to recursively sort the array
void quickSort(int array[], int low, int high) {
    if (low < high) {
        // Partition the array into two subarrays and get the pivot index
        int pi = partition(array, low, high);

        // Recursively sort the subarrays
        quickSort(array, low, pi - 1);  // Sort the left subarray
        quickSort(array, pi + 1, high); // Sort the right subarray
    }
}

// Function to print the array
void printArray(int array[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
}

int main() {
    int array[] = {10, 7, 8, 9, 1, 5};  // Sample array
    int n = sizeof(array) / sizeof(array[0]);

    printf("Original array: \n");
    printArray(array, n);

    // Apply quick sort to the array
    quickSort(array, 0, n - 1);

    printf("Sorted array: \n");
    printArray(array, n);

    return 0;
}
